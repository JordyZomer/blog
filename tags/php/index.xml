<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on pwning.systems</title>
    <link>https://pwning.systems/tags/php/</link>
    <description>Recent content in PHP on pwning.systems</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jordy Zomer</copyright>
    <lastBuildDate>Sat, 26 Mar 2022 09:05:53 +0100</lastBuildDate><atom:link href="https://pwning.systems/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP filter_var shenanigans</title>
      <link>https://pwning.systems/posts/php_filter_var_shenanigans/</link>
      <pubDate>Sat, 26 Mar 2022 09:05:53 +0100</pubDate>
      
      <guid>https://pwning.systems/posts/php_filter_var_shenanigans/</guid>
      <description>It is likely that we have all seen PHP filters that prevent us from encountering vulnerabilities. Here in this blog post, I&amp;rsquo;ll walk you through my thought process for bypassing a filter by looking for a bug in the filter itself in order to reach a bug!
Let&amp;rsquo;s pretend we have the following code, which passes some user-input to filter_var() and uses the FILTER_VALIDATE_DOMAIN or FILTER FLAG HOSTNAME flag. This adds the functionality to validate hostnames on a per-host rationale (this means that they must begin with an alphanumeric character and must contain only alphanumerics or hyphens throughout their entire length).</description>
    </item>
    
  </channel>
</rss>
