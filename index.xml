<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwning.systems</title>
    <link>https://pwning.systems/</link>
    <description>Recent content on pwning.systems</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jordy Zomer</copyright>
    <lastBuildDate>Mon, 31 Oct 2022 19:30:12 +0200</lastBuildDate><atom:link href="https://pwning.systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A tale of a simple Apple kernel bug</title>
      <link>https://pwning.systems/posts/easy-apple-kernel-bug/</link>
      <pubDate>Mon, 31 Oct 2022 19:30:12 +0200</pubDate>
      
      <guid>https://pwning.systems/posts/easy-apple-kernel-bug/</guid>
      <description>Earlier this year, I discovered a flaw in XNU, which is the kernel that Apple uses on both macOS and iOS. While it&amp;rsquo;s not a particularly complicated flaw, I wanted to explain how I discovered it and how it works, both so that I can motivate others and so that they can learn from my discovery.
Within the memdev.c file (the ramdisk device driver), I found the source of the vulnerability, which was a write/read operation that exceeded the allowed range.</description>
    </item>
    
    <item>
      <title>PHP filter_var shenanigans</title>
      <link>https://pwning.systems/posts/php_filter_var_shenanigans/</link>
      <pubDate>Sat, 26 Mar 2022 09:05:53 +0100</pubDate>
      
      <guid>https://pwning.systems/posts/php_filter_var_shenanigans/</guid>
      <description>It is likely that we have all seen PHP filters that prevent us from encountering vulnerabilities. Here in this blog post, I&amp;rsquo;ll walk you through my thought process for bypassing a filter by looking for a bug in the filter itself in order to reach a bug!
Let&amp;rsquo;s pretend we have the following code, which passes some user-input to filter_var() and uses the FILTER_VALIDATE_DOMAIN or FILTER FLAG HOSTNAME flag. This adds the functionality to validate hostnames on a per-host rationale (this means that they must begin with an alphanumeric character and must contain only alphanumerics or hyphens throughout their entire length).</description>
    </item>
    
    <item>
      <title>Escaping privileged containers for fun</title>
      <link>https://pwning.systems/posts/escaping-containers-for-fun/</link>
      <pubDate>Sun, 06 Mar 2022 10:42:53 +0100</pubDate>
      
      <guid>https://pwning.systems/posts/escaping-containers-for-fun/</guid>
      <description>Despite the fact that it is not a &amp;lsquo;real&amp;rsquo; vulnerability, escaping privileged Docker containers is nevertheless pretty funny. And because there will always be people who will come up with reasons or excuses to run a privileged container (even though you really shouldn&amp;rsquo;t), this could really be handy at some point in the future.
As a result of the recent discovery of the cgroup_release_agent escape trick (CVE-2022-0492), I went on a search for calls to the call_usermodehelper_* family and attempted to determine which ones may be easily accessed within a container environment.</description>
    </item>
    
    <item>
      <title>Variant analysis of the &#39;Sequoia&#39; bug</title>
      <link>https://pwning.systems/posts/sequoia-variant-analysis/</link>
      <pubDate>Tue, 03 Aug 2021 18:25:12 +0200</pubDate>
      
      <guid>https://pwning.systems/posts/sequoia-variant-analysis/</guid>
      <description>I imagine we&amp;rsquo;ve all heard about the recent &amp;ldquo;Sequoia&amp;rdquo; bug discovered by the Qualys Research team, identified by CVE-2021-33909. It&amp;rsquo;s a fascinating bug caused by a size_t to int conversion. According to the analysis, seq_dentry attempts to convert a size_t to an int by sending size_t size to the dentry_path function, which expects a signed integer. Assuming the architecture is 32 bits, size_t&amp;rsquo;s value can be 0 to 4294967296 since it is unsigned, but int can only hold from -2147483648 to 2147483648 because it is signed (this means that it can have negative values also).</description>
    </item>
    
    <item>
      <title>A story about an Apple and two fetches</title>
      <link>https://pwning.systems/posts/apple-kernel-vulnerability/</link>
      <pubDate>Tue, 20 Jul 2021 19:30:12 +0200</pubDate>
      
      <guid>https://pwning.systems/posts/apple-kernel-vulnerability/</guid>
      <description>Mistreatment by Apple Security is unfortunately something you&amp;rsquo;re likely to come across on a regular basis. Usually this concerns people that conduct free work for Apple in their spare time by auditing their assets. Despite Apple&amp;rsquo;s website claiming the opposite, you&amp;rsquo;ll frequently find things like quiet patching, no credit, no bounties, and an appalling lack of communication.
This is unwise on Apple&amp;rsquo;s part because it frustrates people who find these bugs and disincentivizes them from sharing them with Apple.</description>
    </item>
    
    <item>
      <title>Setting Up a Kernel Debugging Environment</title>
      <link>https://pwning.systems/posts/setting-up-a-kernel-debugging-environment/</link>
      <pubDate>Wed, 31 Mar 2021 18:06:16 +0200</pubDate>
      
      <guid>https://pwning.systems/posts/setting-up-a-kernel-debugging-environment/</guid>
      <description>Following up on my first blog post, I&amp;rsquo;ve received a few requests to write about setting up a debugging environment; however, since everybody uses different emulators and so on, I&amp;rsquo;ll mainly focus on which config options are useful!
You must first obtain the kernel sources for your preferred version before you can set up a kernel suitable for debugging. We&amp;rsquo;ll have to decompress it after that.
# use your preferred version $ wget https://git.</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://pwning.systems/links/</link>
      <pubDate>Wed, 10 Mar 2021 17:55:42 +0100</pubDate>
      
      <guid>https://pwning.systems/links/</guid>
      <description>Here are some links to a few of my favorite websites.
 Darkscience - Nice IRC network SmashTheStack - Nice wargames and community! OverTheWire - Another set of great wargames Dustri.org - Cool person that writes great blogposts :)  </description>
    </item>
    
    <item>
      <title>An introduction to Kernel Exploitation Part 1</title>
      <link>https://pwning.systems/posts/an-introduction-to-kernel-exploitation-part1/</link>
      <pubDate>Mon, 08 Mar 2021 18:42:53 +0100</pubDate>
      
      <guid>https://pwning.systems/posts/an-introduction-to-kernel-exploitation-part1/</guid>
      <description>I&amp;rsquo;m writing this post because I often hear that kernel exploitation is intimidating or difficult to learn. As a result, I&amp;rsquo;ve decided to start a series of basic bugs and exercises to get you started!
Prerequisites
 Knowledge of the Linux command line Knowing how to read and write basic C may be beneficial Being able to debug with the help of a virtual computer or another system Able to install the kernel module compilation build requirements A basic understanding of the difference between userland and kernelland could be helpful Having a basic understanding of assembly can be beneficial for future episodes  For this part, I wrote a simple Linux character device, /dev/shell.</description>
    </item>
    
    <item>
      <title>Bugs</title>
      <link>https://pwning.systems/bugs/</link>
      <pubDate>Thu, 04 Mar 2021 18:43:47 +0100</pubDate>
      
      <guid>https://pwning.systems/bugs/</guid>
      <description>The following are some of the bugs I discovered:
2022   CVE-2022-26743: An out-of-bounds write issue was addressed with improved bounds checking. This issue is fixed in macOS Monterey 12.4. An attacker that has already achieved code execution in macOS Recovery may be able to escalate to kernel privileges. - Self note: This was both a write and a read of a user controlled size at a user controlled offset.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://pwning.systems/about/</link>
      <pubDate>Thu, 04 Mar 2021 18:35:06 +0100</pubDate>
      
      <guid>https://pwning.systems/about/</guid>
      <description>Hello and welcome to my blog!
I&amp;rsquo;m Jordy (also known as Oblivion on IRC), and some of my interests that I may discuss include:
 Fuzzing Reverse Engineering Binary Exploitation Vulnerability Research (mainly OSS focused)  And, don&amp;rsquo;t forget to find me on Twitter!
You can reach out to me by email at jordy [a-t] pwning.systems :)
Cheers!</description>
    </item>
    
  </channel>
</rss>
